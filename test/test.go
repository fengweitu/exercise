package main

import (
	"encoding/base64"
	"github.com/elastic/go-libaudit/v2"

	// "encoding/base64"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	// "github.com/elastic/go-libaudit/v2"
	"io"
	"os"

	"github.com/elastic/go-libaudit/v2/sys"
)

const testRule = `BAAAAAIAAAACAAAABAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGsAAABovZXRj`


func main(){
	if sys.GetEndian() != binary.LittleEndian {
		fmt.Println("testRule is for little endian, but test machine is big endian")
	}

	if os.Geteuid() != 0 {
		fmt.Println("must be root to get audit status")
	}

	var dumper io.WriteCloser
	if true {
		dumper = hex.Dumper(os.Stdout)
		defer dumper.Close()
	}

	c, errN := libaudit.NewAuditClient(dumper)
	if errN != nil {
		fmt.Println("NewAuditClient err: ",errN)
	}
	defer c.Close()
	defer c.DeleteRules()

	rawRule, _ := base64.StdEncoding.DecodeString(testRule)
	fmt.Println("-----------------------------------------------------------")
	fmt.Println(rawRule)
	fmt.Println("-----------------------------------------------------------")
	if errA := c.AddRule(rawRule); errA != nil {
		fmt.Println("AddRule: ",errA)
	}
	fmt.Println("rule added")
}